<?php
/**
 * @file
 * Taboola module code.
 */

/**
 * Implements hook_permission().
 */
function taboola_permission() {
  return array(
    'administer taboola' => array(
      'title' => t('Administer Taboola'),
      'description' => t('Administer account settings and visibility of Taboola on your site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function taboola_menu() {
  $items['admin/config/system/taboola'] = array(
    'title' => 'Taboola',
    'description' => 'Configure Taboola blocks on your website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taboola_admin_settings_form'),
    'access arguments' => array('administer taboola'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'taboola.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function taboola_theme() {
  return array(
    'taboola_container' => array(
      'variables' => array(
        'widget_class' => '',
        'widget_id' => '',
      ),
      'path' => drupal_get_path('module', 'taboola') . '/theme',
      'template' => 'taboola-container',
    ),
  );
}

/**
 * Implements hook_help().
 */
function taboola_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/taboola':
      return t('<a href="@url">Taboola</a> is an analytics tool that provides links to other content either internally or from external sites.', array('@url' => 'http://www.taboola.com/'));
  }
}

/**
 * Implements hook_page_alter().
 *
 * It's very important that this hook is fired after hook_page_build().
 *
 * @see: taboola_dfp_native_page_build().
 */
function taboola_page_alter(&$page) {

  // Add header and footer JS.
  if (!path_is_admin(current_path()) && taboola_get_setting('taboola_enabled') && $service_path = taboola_get_setting('taboola_service_path')) {

    // Identifier coming from outside of the module.
    $loader_identifier = !empty($page['taboola']['vars']['loader_identifier']) ? $page['taboola']['vars']['loader_identifier'] : 'article';

    // Add inline header JS.
    $js = array(
      "window._taboola = window._taboola || [];",
      "_taboola.push({" . drupal_json_encode($loader_identifier) . ":'auto'});",
      "!function (e, f, u, i) {if (!document.getElementById(i)){e.async = 1;e.src = u;e.id = i;f.parentNode.insertBefore(e, f);}}",
      "(document.createElement('script'), document.getElementsByTagName('script')[0], ".drupal_json_encode($service_path).", 'tb_loader_script');",
      "if(window.performance && typeof window.performance.mark == 'function'){window.performance.mark('tbl_ic');}",
    );

    drupal_add_js(implode(PHP_EOL, $js), array(
      'scope' => 'header',
      'type' => 'inline',
      'weight' => 1,
    ));

    // Add inline footer JS.
    $footer_js = array(
      "window._taboola = window._taboola || [];",
      "_taboola.push({flush: true});",
    );
    drupal_add_js(implode(PHP_EOL, $footer_js), array(
      'scope' => 'footer',
      'type' => 'inline',
      'weight' => 2,
    ));

    // Execute taboola_escalate plugin.
    if (module_exists('context')) {
      $reactions = array('taboola_escalator', 'taboola_x');
      foreach ($reactions as $reaction) {
        if ($plugin = context_get_plugin('reaction', $reaction)) {
          $plugin->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function taboola_block_info() {
  $blocks = array();
  for ($i = 1; $i <= variable_get('taboola_block_count'); $i++) {
    $blocks['taboola_block' . $i] = array(
      'info' => t('Taboola Block ' . $i),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 */
function taboola_block_configure($delta = '') {
  $form = array();

  if (($block_index = taboola_get_block_array_index($delta)) !== FALSE) {
    // Type group.
    $form['taboola_group'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taboola Settings'),
      '#group' => 'vertical_tabs',
    );
    // Mode.
    $form['taboola_group']['taboola_mode'] = array(
      '#type' => 'textfield',
      '#title' => t('Mode'),
      '#default_value' => taboola_get_block_setting($block_index, 'mode', $default = ''),
      '#description' => '',
    );
    // Placement.
    $form['taboola_group']['taboola_placement'] = array(
      '#type' => 'textfield',
      '#title' => t('Placement'),
      '#default_value' => taboola_get_block_setting($block_index, 'placement', $default = ''),
      '#description' => '',
    );
    // Target Type.
    $form['taboola_group']['taboola_target_type'] = array(
      '#type' => 'textfield',
      '#title' => t('Target Type'),
      '#default_value' => taboola_get_block_setting($block_index, 'target_type', $default = ''),
      '#description' => '',
    );
    // Container.
    $form['taboola_group']['taboola_container'] = array(
      '#type' => 'textfield',
      '#title' => t('Container'),
      '#default_value' => taboola_get_block_setting($block_index, 'container', $default = ''),
      '#description' => '',
    );

    // Allow other modules to alter the form.
    drupal_alter('taboola_block_config', $form, $delta);
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit
 */
function taboola_block_save($delta = '', $edit = array()) {
  if (($block_index = taboola_get_block_array_index($delta)) !== FALSE) {
    $taboola_blocks = variable_get('taboola_blocks',array());
    $taboola_blocks[$block_index]['subject'] = $edit['title'];
    $taboola_blocks[$block_index]['mode'] = $edit['taboola_mode'];
    $taboola_blocks[$block_index]['container'] = $edit['taboola_container'];
    $taboola_blocks[$block_index]['target_type'] = $edit['taboola_target_type'];
    $taboola_blocks[$block_index]['placement'] = $edit['taboola_placement'];

    // Allow other modules to change block configs before saving.
    $block_config = &$taboola_blocks[$block_index];
    $form_values = $edit;
    drupal_alter('taboola_block_save', $block_config, $form_values);

    variable_set('taboola_blocks', $taboola_blocks);
  }
}

/**
 * Implements hook_block_view().
 */
function taboola_block_view($delta = '') {
  $block = array();
  if (($block_index = taboola_get_block_array_index($delta)) !== FALSE) {
    $block = taboola_get_block_array($block_index);
  }
  return $block;
}

/**
 * Helper to get block index.
 *
 * Note: this can return zero so always check that it's not === FALSE.
 *
 * @param string $delta
 */
function taboola_get_block_array_index($delta) {
  // We check if block delta is taboola_blockX being X a number.
  $number = str_replace('taboola_block', '', $delta);
  if (substr_compare($delta, 'taboola_block', 0, 13) == 0 && is_numeric($number)) {
    return (int) $number - 1;
  }
  return FALSE;
}

/**
 * Create taboola block array.
 *
 * @param unknown $block_index
 *   The array index of the block
 */
function taboola_get_block_array($block_index) {
  if (taboola_get_setting('taboola_enabled')) {
    // Create block subject and content.
    if ($subject = taboola_get_block_setting($block_index, 'subject')) {
      $block['subject'] = $subject;
    }
    $block['content'] = array(
      '#attached' => array(
        'js' => taboola_get_attached_js($block_index),
      ),
      '#widget_id' => taboola_get_block_setting($block_index, 'container'),
      '#theme' => 'taboola_container',
    );
  }
  else {
    $block['content'] = '';
  }
  return $block;
}

/**
 * Returns attached JS array.
 *
 * @param unknown $block_index
 *   The array index of the block
 */
function taboola_get_attached_js($block_index) {
  // Create JS.
  $js = array();
  $js[] = "window._taboola = window._taboola || [];";
  $js[] = taboola_get_widget_setting_js($block_index);
  return array(
    array(
      'data' => implode(PHP_EOL, $js),
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 0,
    ),
  );
}

/**
 * Get widget setting JS.
 *
 * @param unknown $block_index
 *   The array index of the block
 */
function taboola_get_widget_setting_js($block_index) {
  // Get Taboola JS settings for this type.
  $mode = taboola_get_block_setting($block_index, 'mode');
  $placement = taboola_get_block_setting($block_index, 'placement');
  $container = taboola_get_block_setting($block_index, 'container');

  // Get target type setting.
  $target_type = taboola_get_block_setting($block_index, 'target_type');

  $widget_settings = array();
  $widget_settings['mode'] = $mode;
  $widget_settings['container'] = $container;
  $widget_settings['placement'] = $placement;
  $widget_settings['target_type'] = !empty($target_type) ?  $target_type : '';
  $widget_settings_json = drupal_json_encode($widget_settings);

  // Return setting JS.
  return "_taboola.push( $widget_settings_json );";
}

/**
 * Get a Taboola setting through a wrapper.
 *
 * @param string $key
 *   Variable key.
 * @param string $default
 *   Default variable value.
 */
function taboola_get_setting($key, $default = '') {
  return variable_get($key, $default);
}

/**
 * Helper to get block settings.
 *
 * @param $block_index
 * @param $key
 * @param string $default
 */
function taboola_get_block_setting($block_index, $key, $default = '') {
  $taboola_blocks = variable_get('taboola_blocks');
  return isset($taboola_blocks[$block_index][$key]) ? $taboola_blocks[$block_index][$key] : null;
}

/**
 * Implements hook_context_registry().
 */
function taboola_context_registry() {
  return array(
    'reactions' => array(
      'taboola_escalator' => array(
        'title' => t('Taboola Escalator'),
        'plugin' => 'taboola_escalator_context_reaction',
      ),
      'taboola_x' => array(
        'title' => t('Taboola-X'),
        'plugin' => 'taboola_x_context_reaction',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function taboola_context_plugins() {
  $plugins = array();
  $plugins['taboola_escalator_context_reaction'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'taboola') . '/plugins',
      'file' => 'taboola_escalator_context_reaction.inc',
      'class' => 'taboola_escalator_context_reaction',
      'parent' => 'context_condition',
    ),
  );
  $plugins['taboola_x_context_reaction'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'taboola') . '/plugins',
      'file' => 'taboola_x_context_reaction.inc',
      'class' => 'taboola_x_context_reaction',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_field_extra_fields().
 */
function taboola_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_types() as $node) {
    if (variable_get('taboola_extra_fields_' . $node->type, 0)) {
      $blocks = taboola_block_info();
      foreach ($blocks as $field_name => $block) {
        $extra['node'][$node->type]['display'][$field_name] = array(
          'label' => $block['info'],
          'description' => $block['info'],
          'weight' => 50,
        );
        taboola_hide_new_extra_field('node', $node->type, $field_name);
      }
    }
  }

  return $extra;
}

/**
 * Utility function to hide any newly created extra_fields.
 *
 * @param string $entity_type
 *   Entity type on which the new extra field will reside.
 * @param string $bundle
 *   Bundle on which the new extra field will reside.
 * @param string $field_name
 *   Machine name of extra field.
 *
 * @see https://api.drupal.org/comment/60167#comment-60167
 */
function taboola_hide_new_extra_field($entity_type, $bundle, $field_name) {
  $settings = field_bundle_settings($entity_type, $bundle);
  $settings_updated = FALSE;
  $entity_info = entity_get_info($entity_type, $bundle);
  $view_modes = array_keys($entity_info['view modes']);
  if (!in_array('default', $view_modes)) {
    $view_modes[] = 'default';
  }
  foreach ($view_modes as $view_mode) {
    if (!isset($settings['extra_fields']['display'][$field_name][$view_mode])) {
      $settings_updated = TRUE;
      $settings['extra_fields']['display'][$field_name][$view_mode] = array(
        'weight' => 100,
        'visible' => FALSE,
      );
    }
  }
  if ($settings_updated) {
    field_bundle_settings($entity_type, $bundle, $settings);
  }
}

/**
 * Implements hook_node_view().
 */
function taboola_node_view($node, $view_mode, $langcode) {
  // Extra fields for the current display maode.
  $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  if (empty($extra_fields)) {
    return;
  }

  // Check each taboola block to see if it is visible.
  $blocks = taboola_block_info();
  foreach ($extra_fields as $field_name => $settings) {
    if (isset($blocks[$field_name])) {
      if (!empty($settings['visible'])) {
        $block = block_load('taboola', $field_name);
        $block_content = _block_render_blocks(array($block));
        $build = _block_get_renderable_array($block_content);
        $bid = $block->module . '_' . $block->delta;
        $node->content[$field_name] = $build[$bid];
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function taboola_form_node_type_form_alter(&$form, &$form_state) {
  $form['taboola'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taboola'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 20,
    '#access' => user_access('administer nodes'),
  );
  $form['taboola']['enable_extra_fields'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Taboola extra fields for this content type.'),
    '#description' => t('By enabling this setting, Taboola blocks will be exposed as extra fields on node displays.'),
    '#default_value' => variable_get('taboola_extra_fields_' . $form['#node_type']->type, 0),
  );
  $form['#submit'][] = 'taboola_node_type_submit_callback';
}

/**
 * Custom handler to save Taboola info.
 */
function taboola_node_type_submit_callback(&$form, &$form_state) {
  $node_type = $form['#node_type']->type;

  $extra_fields_variable_name = 'taboola_extra_fields_' . $node_type;
  $enable_extra_fields = $form_state['complete form']['taboola']['enable_extra_fields']['#value'];

  // When extra fields are enabled for the first time on this content type,
  // redirect to the display settings.
  if (variable_get($extra_fields_variable_name, 0) == 0 && $enable_extra_fields == TRUE) {
    drupal_set_message(t('Please configure Taboola blocks for each Display.'));
    $form_state['redirect'] = 'admin/structure/types/manage/' . $node_type . '/display';
  }

  // Set the variable for this node type.
  variable_set($extra_fields_variable_name, $enable_extra_fields);

  // Clear cache.
  field_info_cache_clear();
}
